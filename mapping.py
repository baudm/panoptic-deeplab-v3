

class Maps(object):
    def __init__(self):
        # colour map of coco panoptic segmentation
        self.label_colours_pan = [(0,0,0), (220, 20, 60), (119, 11, 32), (0, 0, 142), (0, 0, 230), (106, 0, 228), (0, 60, 100), (0, 80, 100), (0, 0, 70), (0, 0, 192),
                             (250, 170, 30), (100, 170, 30), (220, 220, 0), (175, 116, 175), (250, 0, 30), (165, 42, 42), (255, 77, 255), (0, 226, 252), (182, 182, 255),
                             (0, 82, 0), (120, 166, 157), (110, 76, 0), (174, 57, 255), (199, 100, 0), (72, 0, 118), (255, 179, 240), (0, 125, 92), (209, 0, 151),
                             (188, 208, 182), (0, 220, 176), (255, 99, 164), (92, 0, 73), (133, 129, 255), (78, 180, 255), (0, 228, 0), (174, 255, 243), (45, 89, 255),
                             (134, 134, 103), (145, 148, 174), (255, 208, 186), (197, 226, 255), (171, 134, 1), (109, 63, 54), (207, 138, 255), (151, 0, 95), (9, 80, 61),
                             (84, 105, 51), (74, 65, 105), (166, 196, 102), (208, 195, 210), (255, 109, 65), (0, 143, 149), (179, 0, 194), (209, 99, 106), (5, 121, 0),
                             (227, 255, 205), (147, 186, 208), (153, 69, 1), (3, 95, 161), (163, 255, 0), (119, 0, 170), (0, 182, 199), (0, 165, 120), (183, 130, 88),
                             (95, 32, 0), (130, 114, 135), (110, 129, 133), (166, 74, 118), (219, 142, 185), (79, 210, 114), (178, 90, 62), (65, 70, 15), (127, 167, 115),
                             (59, 105, 106), (142, 108, 45), (196, 172, 0), (95, 54, 80), (128, 76, 255), (201, 57, 1), (246, 0, 122), (191, 162, 208), (255, 255, 128),
                             (147, 211, 203), (150, 100, 100), (168, 171, 172), (146, 112, 198), (210, 170, 100),(92, 136, 89),  (218, 88, 184), (241, 129, 0),
                             (217, 17, 255),  (124, 74, 181),  (70, 70, 70),    (255, 228, 255), (154, 208, 0),  (193, 0, 92),   (76, 91, 113),  (255, 180, 195), (106, 154, 176),
                             (230, 150, 140), (60, 143, 255),  (128, 64, 128),  (92, 82, 55),    (254, 212, 124),(73, 77, 174),  (255, 160, 98), (255, 255, 255), (104, 84, 109),
                             (169, 164, 131), (225, 199, 255), (137, 54, 74),   (135, 158, 223), (7, 246, 231),  (107, 255, 200),(58, 41, 149),  (183, 121, 142), (255, 73, 97),
                             (107, 142, 35),  (190, 153, 153), (146, 139, 141), (70, 130, 180),  (134, 199, 156),(209, 226, 140),(96, 36, 108),  (96, 96, 96),   (64, 170, 64),
                             (152, 251, 152), (208, 229, 228), (206, 186, 171), (152, 161, 64),  (116, 112, 0),  (0, 114, 143),  (102, 102, 156),(250, 141, 255)]

        # color map of coco panoptic segmentation stuff classes
        self.label_colours_stuff = [(0,0,0),(191, 162, 208), (255, 255, 128), (147, 211, 203), (150, 100, 100), (168, 171, 172), (146, 112, 198), (210, 170, 100),
                             (92, 136, 89),  (218, 88, 184), (241, 129, 0), (217, 17, 255),  (124, 74, 181),  (70, 70, 70),    (255, 228, 255), (154, 208, 0),
                             (193, 0, 92),   (76, 91, 113),  (255, 180, 195), (106, 154, 176), (230, 150, 140), (60, 143, 255),  (128, 64, 128),  (92, 82, 55),
                             (254, 212, 124),(73, 77, 174),  (255, 160, 98), (255, 255, 255), (104, 84, 109), (169, 164, 131), (225, 199, 255), (137, 54, 74),
                             (135, 158, 223), (7, 246, 231),  (107, 255, 200),(58, 41, 149),  (183, 121, 142), (255, 73, 97), (107, 142, 35),  (190, 153, 153),
                             (146, 139, 141), (70, 130, 180),  (134, 199, 156),(209, 226, 140),(96, 36, 108),  (96, 96, 96),   (64, 170, 64), (152, 251, 152),
                             (208, 229, 228), (206, 186, 171), (152, 161, 64),  (116, 112, 0),  (0, 114, 143),  (102, 102, 156),(250, 141, 255)]
        # panoptic classes to compressed number of classes (134)
        self.panoptic_category_mapping = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 13: 12, 14: 13, 15: 14, 16: 15,
                                    17: 16, 18: 17, 19: 18, 20: 19, 21: 20, 22: 21, 23: 22, 24: 23, 25: 24, 27: 25, 28: 26, 31: 27, 32: 28, 33: 29,
                                    34: 30, 35: 31, 36: 32, 37: 33, 38: 34, 39: 35, 40: 36, 41: 37, 42: 38, 43: 39, 44: 40, 46: 41, 47: 42, 48: 43,
                                    49: 44, 50: 45, 51: 46, 52: 47, 53: 48, 54: 49, 55: 50, 56: 51, 57: 52, 58: 53, 59: 54, 60: 55, 61: 56, 62: 57,
                                    63: 58, 64: 59, 65: 60, 67: 61, 70: 62, 72: 63, 73: 64, 74: 65, 75: 66, 76: 67, 77: 68, 78: 69, 79: 70, 80: 71,
                                    81: 72, 82: 73, 84: 74, 85: 75, 86: 76, 87: 77, 88: 78, 89: 79, 90: 80, 92: 81, 93: 82, 95: 83, 100: 84, 107: 85,
                                    109: 86, 112: 87, 118: 88, 119: 89, 122: 90, 125: 91, 128: 92, 130: 93, 133: 94, 138: 95, 141: 96, 144: 97, 145: 98,
                                    147: 99, 148: 100, 149: 101, 151: 102, 154: 103, 155: 104, 156: 105, 159: 106, 161: 107, 166: 108, 168: 109,
                                    171: 110, 175: 111, 176: 112, 177: 113, 178: 114, 180: 115, 181: 116, 184: 117, 185: 118, 186: 119, 187: 120, 188: 121,
                                    189: 122, 190: 123, 191: 124, 192: 125, 193: 126, 194: 127, 195: 128, 196: 129, 197: 130, 198: 131, 199: 132, 200: 133}

        self.panoptic_category_rev = dict((v,k) for k,v in self.panoptic_category_mapping.items())

        # panoptic classes to compressed number of stuff classes (54)
        self.stuff_category_mapping = {0: 0, 92: 1, 93: 2, 95: 3, 100: 4, 107: 5, 109: 6, 112: 7, 118: 8, 119: 9, 122: 10,
                                  125: 11, 128: 12, 130: 13, 133: 14, 138: 15, 141: 16, 144: 17, 145: 18, 147: 19, 148: 20,
                                  149: 21, 151: 22, 154: 23, 155: 24, 156: 25, 159: 26, 161: 27, 166: 28, 168: 29, 171: 30,
                                  175: 31, 176: 32, 177: 33, 178: 34, 180: 35, 181: 36, 184: 37, 185: 38, 186: 39, 187: 40,
                                  188: 41, 189: 42, 190: 43, 191: 44, 192: 45, 193: 46, 194: 47, 195: 48, 196: 49, 197: 50,
                                  198: 51, 199: 52, 200: 53}

        self.stuff_category_rev = dict((v,k) for k,v in self.stuff_category_mapping.items())

def get_available_gpus():
    """ check gpu visibility """
    from tensorflow.python.client import device_lib
    local_device_protos = device_lib.list_local_devices()
    return [x.name for x in local_device_protos if x.device_type == 'GPU']

if __name__ == '__main__':
    get_available_gpus()
